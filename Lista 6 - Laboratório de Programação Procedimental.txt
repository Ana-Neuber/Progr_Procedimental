Lista 6 de  Programação Procedimental
Ana Laura Neuber de Castro Carvalho - 12221BCC027

Exercício 1

#include <stdio.h>
#include <stdlib.h>

struct horario{
	unsigned int hora, minutos, segundos;
};

struct data{
	unsigned int dia, mes, ano;
};

typedef struct horario horario;
typedef struct data data;

struct compromisso{
	data dia;
	horario hora;
	char descricao[10000];	
};

typedef struct compromisso compromisso;

Exercício 2

#include <stdio.h>
#include <stdlib.h>

struct informacoes{
	char nome[60], endereco[60];
	unsigned int idade;
};

typedef struct informacoes informacoes;

int main(){
	informacoes pessoa;
	
	
	printf("Ola, Claudiney! Insira os dados de uma pessoa.");
	printf("\nNome: ");
	setbuf(stdin,NULL);
	fgets(pessoa.nome,60,stdin);
	printf("Idade: ");
	scanf("%d", &pessoa.idade);
	printf("Endereco: ");
	setbuf(stdin,NULL);
	fgets(pessoa.endereco,60,stdin);

	return 0;
}

Exercício 3

#include <stdio.h>
#include <stdlib.h>

struct aluno{
	char nome[60], matricula[13], curso[60];
};

typedef struct aluno aluno;

int main(){
	printf("Ola, Claudiney!\n");
	aluno alunos[5];
	
	for(int i=0; i<5; i++){
		printf("Insira os dados do aluno %d.", i+1);
		printf("\nNome: ");
		setbuf(stdin,NULL);
		fgets(alunos[i].nome,60,stdin);
		printf("Matricula: ");
		setbuf(stdin,NULL);
		fgets(alunos[i].matricula,12,stdin);	
		printf("Curso: ");
		setbuf(stdin,NULL);
		fgets(alunos[i].curso,60,stdin);	
	}
	
	for(int i=0; i<5; i++){
		printf("\nAluno %d", i+1);
		printf("\nNome: %s", alunos[i].nome);
		printf("\nMatricula: %s", alunos[i].matricula);
		printf("\nCurso: %s", alunos[i].curso);
	}
	
	return 0;
	
}

Exercício 4

#include <stdio.h>

struct aluno{
	char nome[60], matricula[13];
	int p1, p2, p3;
	float media;
};

typedef struct aluno aluno;

int main(){
	printf("Ola, Claudiney!\n");
	aluno alunos[5];
	int maiorp1 = 0, maiormedia = 0, menormedia = 0;
	
	for(int i=0; i<5; i++){
		
		printf("Insira os dados do aluno %d.", i+1);
		printf("\nNome: ");
		setbuf(stdin,NULL);
		fgets(alunos[i].nome,60,stdin);
		
		printf("Matricula: ");
		setbuf(stdin,NULL);
		fgets(alunos[i].matricula,12,stdin);	
		
		printf("Nota da prova 1: ");
		scanf("%d", &alunos[i].p1);	
		printf("Nota da prova 2: ");
		scanf("%d", &alunos[i].p2);
		printf("Nota da prova 3: ");
		scanf("%d", &alunos[i].p3);
		
		alunos[i].media = (alunos[i].p1+alunos[i].p2+alunos[i].p3)/3.0;
		
		if(alunos[i].p1>alunos[maiorp1].media){
			maiorp1=i;
		}
		if(alunos[i].media>alunos[maiormedia].media){
			maiormedia=i;
		}
		if(alunos[i].media<alunos[menormedia].media){
			menormedia=i;
		}
	}
	
	printf("\nAluno com maior nota na prova 1: %sNota: %d", alunos[maiorp1].nome, alunos[maiorp1].p1);
	printf("\nAluno com maior media: %sMedia: %d", alunos[maiormedia].nome, alunos[maiormedia].p1);
	printf("\nAluno com menor media: %sMedia: %d\n", alunos[menormedia].nome, alunos[menormedia].p1);
	
	for(int i=0; i<5; i++){
		printf("\nAluno: %sStatus: ", alunos[i].nome);
		if(alunos[i].media>=6){
			printf("Aprovado");
		}
		else{
			printf("Reprovado");
		}
	}
	
	return 0;
	
}

Exercicio 5

#include <stdio.h>
#include <stdlib.h>

struct vetor{
	float a, b, c;
};

typedef struct vetor vetor;

int main(){
	printf("Ola, Claudiney!\n");
	
	vetor v1={1,2,3}, v2={3,4,5}, soma;
	
	soma.a = v1.a + v2.a;
	soma.b = v1.b + v2.b;
	soma.c = v1.c + v2.c;
	
	printf("x: %f", soma.a);
	printf("y: %f", soma.b);
	printf("z: %f", soma.c);
	
	return 0;
	
}

Exercicio 6

#include <stdio.h>

struct alunos{
	char nome[60], matricula[13], codigo[13];
	int p1, p2;
	float media;
};

typedef struct alunos alunos;

int main(){
	printf("Ola, Claudiney!\n");
	alunos aluno[10];
	
	for(int i=0; i<10; i++){
		
		printf("Insira os dados do aluno %d.", i+1);
		printf("\nNome: ");
		setbuf(stdin,NULL);
		fgets(aluno[i].nome,60,stdin);
		
		printf("Matricula: ");
		setbuf(stdin,NULL);
		fgets(aluno[i].matricula,12,stdin);	
		
		printf("Codigo de disciplina: ");
		setbuf(stdin,NULL);
		fgets(aluno[i].codigo,12,stdin);	
		
		printf("Nota da prova 1: ");
		scanf("%d", &aluno[i].p1);	
		printf("Nota da prova 2: ");
		scanf("%d", &aluno[i].p2);
		
		
		aluno[i].media = (aluno[i].p1*0.33)+(aluno[i].p2*0.66);
	}
	
	for(int i=0; i<10; i++){
		printf("\nAluno: %sMedia: %f", aluno[i].nome, aluno[i].media);
	}
	
	return 0;
	
}

Exercício 7 

#include <stdio.h>
#include <math.h>

struct ponto_cartesiano {
    float x;
    float y;
};

struct ponto_polar {
    float r;
    float a;
};

typedef struct ponto_cartesiano ponto_cartesiano;
typedef struct ponto_polar ponto_polar;

ponto_cartesiano polar_cartesiano(ponto_polar polar) {
    ponto_cartesiano cartesiano;
    cartesiano.x = polar.r * cos(polar.a);
    cartesiano.y = polar.r * sin(polar.a);
    return cartesiano;
}

int main() {
    ponto_polar polar;
    ponto_cartesiano cartesiano;

    printf("Insira as coordenadas polares:\n");
    printf("Raio: ");
    scanf("%f", &polar.r);
    printf("Argumento: ");
    scanf("%f", &polar.a);

    cartesiano = polar_cartesiano(polar);

    printf("\nCoordenadas cartesianas:\n");
    printf("x = %.2f\n", cartesiano.x);
    printf("y = %.2f\n", cartesiano.y);

    return 0;
}

Exercício 8

#include <stdio.h>

struct funcionarios {
    char nome[30];
    int idade;
    char sexo;
    char cpf[15];
    char nascimento[11];
    int setor;
    char cargo[30];
    float salario;
};

typedef struct funcionarios funcionarios;

int main() {
    funcionarios funcionario;

    printf("Digite o nome do funcionario: ");
    setbuf(stdin, NULL);
    fgets(funcionario.nome,29,stdin);

    printf("Digite a idade do funcionario: ");
    scanf("%d", &funcionario.idade);

    printf("Digite o sexo do funcionario (M/F): ");
    scanf(" %c", &funcionario.sexo);

    printf("Digite o CPF do funcionario: ");
    setbuf(stdin, NULL);
    fgets(funcionario.cpf,14,stdin);

    printf("Digite a data de nascimento do funcionario (DD/MM/AAAA): ");
    setbuf(stdin, NULL);
    fgets(funcionario.nascimento,10,stdin);

    printf("Digite o codigo do setor onde trabalha: ");
    scanf("%d", &funcionario.codigoSetor);

    printf("Digite o cargo que o funcionario ocupa: ");
    setbuf(stdin, NULL);
    fgets(funcionario.cargo,29,stdin);

    printf("Digite o salario do funcionario: ");
    scanf("%f", &funcionario.salario);


    printf("\nDados do funcionario:\n");
    printf("Nome: %s\n", funcionario.nome);
    printf("Idade: %d\n", funcionario.idade);
    printf("Sexo: %c\n", funcionario.sexo);
    printf("CPF: %s\n", funcionario.cpf);
    printf("Data de Nascimento: %s\n", funcionario.nascimento);
    printf("Codigo do Setor: %d\n", funcionario.setor);
    printf("Cargo: %s\n", funcionario.cargo);
    printf("Salario: %.2f\n", funcionario.salario);

    return 0;
}

Exercício 9

#include <stdio.h>
#include <math.h>


struct NumeroComplexo {
    double real;
    double imaginario;
};

typedef struct NumeroComplexo NumeroComplexo;

NumeroComplexo somarComplexos(struct NumeroComplexo z, struct NumeroComplexo w) {
    struct NumeroComplexo resultado;
    resultado.real = z.real + w.real;
    resultado.imaginario = z.imaginario + w.imaginario;
    return resultado;
}


NumeroComplexo subtrairComplexos(struct NumeroComplexo z, struct NumeroComplexo w) {
    struct NumeroComplexo resultado;
    resultado.real = z.real - w.real;
    resultado.imaginario = z.imaginario - w.imaginario;
    return resultado;
}

NumeroComplexo multiplicarComplexos(struct NumeroComplexo z, struct NumeroComplexo w) {
    struct NumeroComplexo resultado;
    resultado.real = z.real * w.real - z.imaginario * w.imaginario;
    resultado.imaginario = z.real * w.imaginario + z.imaginario * w.real;
    return resultado;
}


double calcularModulo(struct NumeroComplexo z) {
    return sqrt(z.real * z.real + z.imaginario * z.imaginario);
}

int main() {
    NumeroComplexo z, w, soma, subtracao;
    double moduloZ, moduloW;

    printf("Digite o primeiro numero complexo:\n");
    printf("Parte real: ");
    scanf("%lf", &z.real);
    printf("Parte imaginaria: ");
    scanf("%lf", &z.imaginario);

    printf("\nDigite o segundo numero complexo:\n");
    printf("Parte real: ");
    scanf("%lf", &w.real);
    printf("Parte imaginaria: ");
    scanf("%lf", &w.imaginario);

 
    soma = somarComplexos(z, w);
    subtracao = subtrairComplexos(z, w);
    produto = multiplicarComplexos(z, w);
    moduloZ = calcularModulo(z);
    moduloW = calcularModulo(w);

    printf("\nResultados:\n");
    printf("Soma: %.2lf + %.2lfi\n", soma.real, soma.imaginario);
    printf("Subtracao: %.2lf + %.2lfi\n", subtracao.real, subtracao.imaginario);
    printf("Produto: %.2lf + %.2lfi\n", produto.real, produto.imaginario);
    printf("Modulo de z: %.2lf\n", moduloZ);
    printf("Modulo de w: %.2lf\n", moduloW);

    return 0;
}

Exercício 10

#include <stdio.h>
#include <string.h>

struct informacoes {
    char nome[21], endereco[30], telefone[17];
};

typedef struct informacoes infomracoes;

int main() {
    informacoes dados[5];
	char nomes[21];
   
    for (int i = 0; i < 5; i++) {
        printf("Digite os dados da pessoa %d:\n", i+1);
        printf("\nNome: ");
        setbuf(stdin,NULL);
	    fgets(dados[i].nome,20,stdin);
        printf("Endereco: ");
        setbuf(stdin,NULL);
	    fgets(dados[i].endereco,29,stdin);
        printf("telefone ((12) 3 4567-8910): ");
        setbuf(stdin,NULL);
	    fgets(dados[i].telefone,16,stdin);
    }
    
    for (int i = 0; i < 5; i++) {
	   for (int j = i+1; j < 5; j++) {
	      if (strcmp(dados[i].nome, dados[j].nome) > 0) {
	         strcpy(nomes, dados[i].nome);
	         strcpy(dados[i].nome, dados[j].nome);
	         strcpy(dados[j].nome, nomes);
	        }
		}
	}
    
    for(int i=0; i<5; i++){
    	printf("\nDados da pessoa %d:\n", i+1);
        printf("\nNome: %s", dados[i].nome);
        printf("\nEndereco: %s", dados[i].endereco);
        printf("\ntelefone: %s", dados[i].telefone);
	}
    
    return 0;
}

Exercício 11

#include <stdio.h>
#include <stdlib.h>
#define MAX_ALUNOS 10
#define MEDIA_MINIMA 5.0


struct Aluno {
    char nome[50];
    int matricula;
    float mediaFinal;
};

typedef struct Aluno Aluno;

int main() {
    Aluno alunos[MAX_ALUNOS];
    Aluno aprovados[MAX_ALUNOS];
    Aluno reprovados[MAX_ALUNOS];


    for (int i = 0; i < MAX_ALUNOS; i++) {
        printf("Digite os dados do aluno %d:\n", i + 1);
        printf("Nome: ");
        scanf("%s", alunos[i].nome);

        printf("Matricula: ");
        scanf("%d", &alunos[i].matricula);

        printf("Media Final: ");
        scanf("%f", &alunos[i].mediaFinal);

        printf("\n");
    }

    int numAprovados = 0;
    int numReprovados = 0;

    for (int i = 0; i < MAX_ALUNOS; i++) {
        if (alunos[i].mediaFinal >= MEDIA_MINIMA) {
            aprovados[numAprovados] = alunos[i];
            numAprovados++;
        } else {
            reprovados[numReprovados] = alunos[i];
            numReprovados++;
        }
    }


    printf("Alunos Aprovados:\n");
    for (int i = 0; i < numAprovados; i++) {
        printf("Nome: %s\n", aprovados[i].nome);
        printf("Matricula: %d\n", aprovados[i].matricula);
        printf("Media Final: %.2f\n", aprovados[i].mediaFinal);
        printf("\n");
    }


    printf("Alunos Reprovados:\n");
    for (int i = 0; i < numReprovados; i++) {
        printf("Nome: %s\n", reprovados[i].nome);
        printf("Matricula: %d\n", reprovados[i].matricula);
        printf("Media Final: %.2f\n", reprovados[i].mediaFinal);
        printf("\n");
    }

    return 0;
}

Exercício 12

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

struct Carta {
    char valor;
    char naipe;
};

typedef struct Carta Carta;

int main() {

    Carta baralho[4][13] = {
        {{'2', 'C'}, {'3', 'C'}, {'4', 'C'}, {'5', 'C'}, {'6', 'C'}, {'7', 'C'}, {'8', 'C'}, {'9', 'C'}, {'1', 'C'}, {'J', 'C'}, {'Q', 'C'}, {'K', 'C'}, {'A', 'C'}},
        {{'2', 'E'}, {'3', 'E'}, {'4', 'E'}, {'5', 'E'}, {'6', 'E'}, {'7', 'E'}, {'8', 'E'}, {'9', 'E'}, {'1', 'E'}, {'J', 'E'}, {'Q', 'E'}, {'K', 'E'}, {'A', 'E'}},
        {{'2', 'O'}, {'3', 'O'}, {'4', 'O'}, {'5', 'O'}, {'6', 'O'}, {'7', 'O'}, {'8', 'O'}, {'9', 'O'}, {'1', 'O'}, {'J', 'O'}, {'Q', 'O'}, {'K', 'O'}, {'A', 'O'}},
        {{'2', 'P'}, {'3', 'P'}, {'4', 'P'}, {'5', 'P'}, {'6', 'P'}, {'7', 'P'}, {'8', 'P'}, {'9', 'P'}, {'1', 'P'}, {'J', 'P'}, {'Q', 'P'}, {'K', 'P'}, {'A', 'P'}}
    };

    Carta jogadores[2][3];

   
    srand(time(NULL));

    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 2; j++) {
            int naipe = rand() % 4;
            int valor = rand() % 13;
            jogadores[j][i] = baralho[naipe][valor];
        }
    }

 
    for (int i = 0; i < 2; i++) {
        printf("Cartas do jogador %d:\n", i + 1);
        for (int j = 0; j < 3; j++) {
            printf("%c%c ", jogadores[i][j].valor, jogadores[i][j].naipe);
        }
        printf("\n\n");
    }

    return 0;
}

Exercício 13

#include <stdio.h>
#include <string.h>

struct dados{
	char nome[50], endereco[100], char nascimento[11], char cidade[50], char cep[9], char email[50];
};

typedef struct dados dados;

int main() {
    dados informacoes;

    printf("Digite seus dados pessoais:\n");

    printf("Nome: ");
    fgets(informacoes.nome,49,stdin);

    printf("Endereço: ");
    fgets(informacoes.endereco,99, stdin);

    printf("Data de Nascimento (DD/MM/AAAA): ");
    fgets(informacoes.nascimento,10, stdin);

    printf("Cidade: ");
    fgets(informacoes.cidade,49, stdin);

    printf("CEP: ");
    fgets(informacoes.cep,8, stdin);

    printf("E-mail: ");
    fgets(informacoes.email,49, stdin);


    int ehValido = 1;

    if (strlen(informacoes.nascimento) != 11 ||
        informacoes.nascimento[2] != '/' ||
        informacoes.nascimento[5] != '/') {
        printf("Data de Nascimento inválida!\n");
        ehValido = 0;
    }


    if (strlen(informacoes.cep) != 9) {
        printf("CEP inválido!\n");
        ehValido = 0;
    }
    else {
        for (int i = 0; i < 8; i++) {
            if (!isdigit(funcionario.cep[i])) {
                printf("CEP inválido!\n");
                ehValido = 0;
                break;
            }
        }
    }


    if (strchr(informacoes.email, '@') == NULL) {
        printf("E-mail inválido!\n");
        ehValido = 0;
    }


    if (ehValido) {
        printf("\n--- Informações Pessoais ---\n");
        printf("Nome: %s", informacoes.nome);
        printf("Endereço: %s", informacoes.endereco);
        printf("Data de Nascimento: %s", informacoes.nascimento);
        printf("Cidade: %s", informacoes.cidade);
        printf("CEP: %s", informacoes.cep);
        printf("E-mail: %s", informacoes.email);
    }
    else {
        printf("\nAlguma informação estava incorreta. Por favor, verifique os dados e tente novamente.\n");
    }

    return 0;
}

Exercício 14

#include <stdio.h>
#include <string.h>

struct carro {
    char marca[15];
    int ano;
    float preco;
};

typedef struct carro carro;

int main() {
    carro carros[5];
    int i, encontrado;
    float p;
   
    for (i = 0; i < 5; i++) {
        printf("Digite os dados do carro %d:\n", i+1);
        printf("Marca (max. 15 letras): ");
        setbuf(stdin,NULL)
	  fgets(carros[i].marca,14,stdin);
        printf("Ano: ");
        scanf("%d", &carros[i].ano);
        printf("Preco: ");
        scanf("%f", &carros[i].preco);
    }
    
    do {
        printf("\nDigite um valor p (ou 0 para sair): ");
        scanf("%f", &p);
        encontrado = 0;
        for (i = 0; i < 5; i++) {
            if (carros[i].preco < p) {
                printf("\nCarro %d:\n", i+1);
                printf("Marca: %s\n", carros[i].marca);
                printf("Ano: %d\n", carros[i].ano);
                printf("Preco: %.2f\n", carros[i].preco);
                encontrado = 1;
            }
        }
        if (!encontrado) {
            printf("\nNenhum carro encontrado com preco menor que %.2f\n", p);
        }
    } while (p != 0);
    
    return 0;
}

Exercício 15

#include <stdio.h>
#include <string.h>

struct livro {
    char titulo[31];
    char autor[16];
    int ano;
};

typedef struct livro livro;

int main() {
    livro livros[5];
    int i, encontrado = 0;
    char titulo_busca[30];
    

    for (i = 0; i < 5; i++) {
        printf("Digite os dados do livro %d:\n", i+1);
        printf("Título (max. 30 letras): ");
        setbuf(stdin,NULL);
	  fgets(livros[i].titulo,30,stdin);
        printf("Autor (max. 15 letras): ");
        setbuf(stdin,NULL);
	  fgets(livros[i].autor,15,stdin);
        printf("Ano: ");
        scanf("%d", &livros[i].ano);
    }
    
    printf("\nDigite o título do livro que deseja buscar: ");
    setbuf(stdin,NULL);
    fgets(titulo_busca,30,stdin);
    
    for (i = 0; i < 5; i++) {
        if (strcmp(livros[i].titulo, titulo_busca) == 0) {
            printf("\nLivro encontrado:\n");
            printf("Título: %s\n", livros[i].titulo);
            printf("Autor: %s\n", livros[i].autor);
            printf("Ano: %d\n", livros[i].ano);
            encontrado = 1;
        }
    }
    
    if (!encontrado) {
        printf("\nNenhum livro encontrado com o título '%s'\n", titulo_busca);
    }
    
    return 0;
}

Exercício 16

#include <stdio.h>
#include <stdlib.h>

struct Data {
    int dia;
    int mes;
    int ano;
};

struct Compromisso {
    char descricao[61];
    struct Data data;
};

int main() {
    struct Compromisso agenda[5];
    int i, M, A;

    for (i = 0; i < 5; i++) {
        printf("Compromisso %d:\n", i+1);
        printf("Digite a descrição (máximo 60 letras): ");
        scanf(" %s", agenda[i].descricao);

        printf("Digite a data:\n");
        printf("Dia: ");
        scanf("%d", &agenda[i].data.dia);
        printf("Mês: ");
        scanf("%d", &agenda[i].data.mes);
        printf("Ano: ");
        scanf("%d", &agenda[i].data.ano);
    }

    while (1) {
        printf("\n");
        printf("Digite o mês (0 para sair): ");
        scanf("%d", &M);
        
        if (M == 0) {
            break;
        }

        printf("Digite o ano: ");
        scanf("%d", &A);

        printf("Compromissos do mês %d do ano %d:\n", M, A);
        for (i = 0; i < 5; i++) {
            if (agenda[i].data.mes == M && agenda[i].data.ano == A) {
                printf("Descrição: %s\n", agenda[i].descricao);
                printf("Data: %d/%d/%d\n", agenda[i].data.dia, agenda[i].data.mes, agenda[i].data.ano);
            }
        }
    }

    return 0;
}

Exercício 17

#include <stdio.h>
#include <stdlib.h>

struct eletrodomestico {
    char nome[16];
    float potencia;
    float tempo_ativo;
};

struct eletrodomestico eletrodomestico;

int main() {
    struct eletrodomestico eletrodomesticos[5];
    int i;
    float consumo_total = 0, tempo_dias;

    for (i = 0; i < 5; i++) {
        printf("Eletrodomestico %d:\n", i + 1);
        printf("Nome: ");
        setbuf(stdin,NULL);
	  fgets(eletrodomesticos[i].nome,15,stdin);
        printf("Potencia (kW): ");
        scanf("%f", &eletrodomesticos[i].potencia);
        printf("Tempo ativo por dia (horas): ");
        scanf("%f", &eletrodomesticos[i].tempo_ativo);
        printf("\n");
    }

    printf("Digite o tempo em dias: ");
    scanf("%f", &tempo_dias);

    for (i = 0; i < 5; i++) {
        consumo_total += (eletrodomesticos[i].potencia * eletrodomesticos[i].tempo_ativo * tempo_dias);
    }

    printf("\nConsumo total: %.2f kW\n", consumo_total);

    printf("\nConsumo relativo por eletrodomestico:\n");
    for (i = 0; i < 5; i++) {
        float consumo_relativo = (eletrodomesticos[i].potencia * eletrodomesticos[i].tempo_ativo * tempo_dias) / (consumo_total * 100);
        printf("%s: %.2f%%\n", eletrodomesticos[i].nome, consumo_relativo);
    }

    return 0;
}

Exercício 18

#include <stdio.h>
#include <stdlib.h>

struct Aeroporto{
    int codigo;
    int voos_saida;
    int voos_chegada;
};

struct Voo{
    int origem;
    int destino;
};

typedef struct Aeroporto Aeroporto;
typedef strut Voo Voo;

int main() {
    const int V = 5; 
    const int A = 5; 
    Voo voos[V];
    Aeroporto aeroportos[A];
    int i, origem, destino;


    printf("Informe os voos:\n");
    for (i = 0; i < V; i++) {
        printf("Voo %d:\n", i + 1);
        printf("Código de origem (0-%d): ", A - 1);
        scanf("%d", &origem);
        while (origem < 0 || origem >= A) {
            printf("Código de origem inválido. Digite novamente: ");
            scanf("%d", &origem);
        }
        printf("Código de destino (0-%d): ", A - 1);
        scanf("%d", &destino);
        while (destino < 0 || destino >= A) {
            printf("Código de destino inválido. Digite novamente: ");
            scanf("%d", &destino);
        }
        voos[i].origem = origem;
        voos[i].destino = destino;
        printf("\n");
    }


    for (i = 0; i < A; i++) {
        aeroportos[i].codigo = i;
        aeroportos[i].voos_saida = 0;
        aeroportos[i].voos_chegada = 0;
    }


    for (i = 0; i < V; i++) {
        aeroportos[voos[i].origem].voos_saida++;
        aeroportos[voos[i].destino].voos_chegada++;
    }


    printf("Situação dos aeroportos:\n");
    for (i = 0; i < A; i++) {
        printf("Aeroporto %d:\n", aeroportos[i].codigo);
        printf("Quantidade de voos de saída: %d\n", aeroportos[i].voos_saida);
        printf("Quantidade de voos de chegada: %d\n", aeroportos[i].voos_chegada);
        printf("\n");
    }

    return 0;
}

Exercício 20

#include <stdio.h>

struct dma {
    int dia;
    int mes;
    int ano;
};

typedef struct dma dma;

int diasNomes(int mes, int ano) {
    int dias;

    if (mes == 2) {
        if ((ano % 4 == 0 && ano % 100 != 0) || ano % 400 == 0) {
            dias = 29; 
        } else {
            dias = 28;
        }
    } else if (mes == 4 || mes == 6 || mes == 9 || mes == 11) {
        dias = 30;
    } else {
        dias = 31;
    }

    return dias;
}

int dataParaDias(struct dma data) {
    int dias = 0;

    for (int i = 1; i < data.ano; i++) {
        if ((i % 4 == 0 && i % 100 != 0) || i % 400 == 0) {
            dias += 366; 
        } else {
            dias += 365;
        }
    }

    for (int i = 1; i < data.mes; i++) {
        dias += diasNomes(i, data.ano);
    }

    dias += data.dia;

    return dias;
}

int diferencaDias(struct dma data1, struct dma data2) {
    int dias1 = dataParaDias(data1);
    int dias2 = dataParaDias(data2);

    return dias2 - dias1;
}

int main() {
    dma data1, data2;
    int difDias;

    printf("Digite a primeira data (dia mes ano): ");
    scanf("%d %d %d", &data1.dia, &data1.mes, &data1.ano);

    printf("Digite a segunda data (dia mes ano): ");
    scanf("%d %d %d", &data2.dia, &data2.mes, &data2.ano);

    difDias = diferencaDias(data1, data2);

    printf("Número de dias entre as datas: %d\n", difDias);

    return 0;
}
